{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","className","check","value","NumberList","judgeItems","judgeList","map","item","key","text","judge","App","state","myRe","handleChange","bind","handleSubmit","event","i","this","length","judgePassword","target","setState","canGo","alert","preventDefault","pattern","RegExp","test","src","logo","alt","placeholder","onChange","type","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,2NCI3C,SAASC,EAASC,GAChB,IAAIC,EAAY,YAIhB,OAHID,EAAME,QACRD,EAAY,aAEP,uBAAGA,UAAWA,GAAYD,EAAMG,OAGzC,SAASC,EAAWJ,GAClB,IACMK,EADYL,EAAMM,UACKC,KAAI,SAACC,GAAD,OAC/B,kBAACT,EAAD,CAAUU,IAAKD,EAAKE,KAClBP,MAAOK,EAAKE,KAAMR,MAAOM,EAAKG,WAElC,OACE,4BACGN,GAKP,IAAMC,EAAY,CAChB,CACEI,KAAM,mCACNC,OAAO,GAET,CACED,KAAM,+BACNC,OAAO,GAET,CACED,KAAM,+BACNC,OAAO,GAET,CACED,KAAM,mBACNC,OAAO,GAET,CACED,KAAM,0BACNC,OAAO,IAsEIC,E,YAlEb,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CAAEV,MAAO,IACtB,EAAKW,KAAO,CAAC,gBAAiB,QAAS,QAAS,QAAQ,aAExD,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANH,E,0EAQNE,GACX,IAAK,IAAIC,EAAI,EAAGA,EAAIC,KAAKN,KAAKO,OAAQF,IAChCC,KAAKE,cAAcF,KAAKN,KAAKK,GAAID,EAAMK,OAAOpB,OAChDG,EAAUa,GAAGR,OAAQ,EAGrBL,EAAUa,GAAGR,OAAQ,EAGzBS,KAAKI,SAAS,CAAErB,MAAOe,EAAMK,OAAOpB,U,mCAGzBe,GAEX,IADA,IAAIO,GAAQ,EACJN,EAAI,EAAGA,EAAIb,EAAUe,OAAQF,IAAI,CACvC,IAAGb,EAAUa,GAAGR,MACZ,CAACc,GAAQ,EAAM,MADIA,GAAQ,EAG9BA,EACDC,MAAM,WAGNA,MAAM,QAERR,EAAMS,mB,oCAGMC,EAASlB,GAErB,OADe,IAAImB,OAAOD,GACZE,KAAKpB,K,+BAGnB,OACE,yBAAKT,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK8B,IAAKC,IAAM/B,UAAU,WAAWgC,IAAI,SACzC,yDAGA,yBAAKhC,UAAU,+BACb,2BACEA,UAAU,mDACViC,YAAY,WACZ/B,MAAOiB,KAAKP,MAAMV,MAClBgC,SAAUf,KAAKL,aACfqB,KAAK,aAEP,yBAAKnC,UAAU,SACb,kBAACG,EAAD,CAAYE,UAAWA,KAEzB,4BAAQL,UAAU,oDAAoDoC,QAASjB,KAAKH,cAApF,uB,GA3DMqB,IAAMC,WCnCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ac4f7e2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\n\nfunction ListItem(props) {\n  let className = 'not-check';\n  if (props.check) {\n    className = ' is-check';\n  }\n  return <p className={className}>{props.value}</p>;\n}\n\nfunction NumberList(props) {\n  const judgeList = props.judgeList;\n  const judgeItems = judgeList.map((item) =>\n    <ListItem key={item.text}\n      value={item.text} check={item.judge} />\n  );\n  return (\n    <ul>\n      {judgeItems}\n    </ul>\n  );\n}\n\nconst judgeList = [\n  {\n    text: \"Cannot start or end with a space\",\n    judge: false,\n  },\n  {\n    text: \"include an lower case letter\",\n    judge: false\n  },\n  {\n    text: \"include an upper case letter\",\n    judge: false\n  },\n  {\n    text: \"include a number\",\n    judge: false\n  },\n  {\n    text: \"be 9-50 characters long\",\n    judge: false\n  }];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n    this.myRe = [/^[^\\s]*[^\\s]$/, /[a-z]/, /[A-Z]/, /[0-9]/,/^.{9,50}$/];\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    for (let i = 0; i < this.myRe.length; i++) {\n      if (this.judgePassword(this.myRe[i], event.target.value)) {\n        judgeList[i].judge = true;\n      }\n      else {\n        judgeList[i].judge = false;\n      }\n    }\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    let canGo = false;\n    for(let i = 0; i < judgeList.length; i++){\n      if(judgeList[i].judge){canGo = true;}\n      else{canGo = false;break;}\n    }\n    if(canGo){\n      alert('success');\n    }\n    else{\n      alert('fail');\n    }\n    event.preventDefault();\n  }\n\n  judgePassword(pattern, text) {\n    const regExp = new RegExp(pattern)\n    return regExp.test(text)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Please Enter Your Password\n        </p>\n          <div className=\"password d-flex flex-column\">\n            <input\n              className=\"my-1 bg-none fs-lg text-white py-1 px-2 text-top\"\n              placeholder=\"password\"\n              value={this.state.value}\n              onChange={this.handleChange}\n              type=\"password\"\n            />\n            <div className=\"judge\">\n              <NumberList judgeList={judgeList} />\n            </div>\n            <button className=\"bt-back-1 bt-nav-1 ripple fs-md py-2 my-2 fw-bold\" onClick={this.handleSubmit}>發送</button>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}